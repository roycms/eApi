{
    "version": 3,
    "sources": [
        "../../../src/controller/admin/question_add.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "indexAction",
        "get",
        "question",
        "model",
        "where",
        "id",
        "find",
        "options",
        "question_id",
        "select",
        "assign",
        "analysis_id",
        "display",
        "addAction",
        "q_id",
        "isPut",
        "isMethod",
        "isPost",
        "data",
        "post",
        "c",
        "JSON",
        "parse",
        "s",
        "console",
        "log",
        "stringify",
        "questionData",
        "title",
        "orderby",
        "type",
        "max_scores",
        "add",
        "forEach",
        "item",
        "index",
        "content",
        "scores",
        "push",
        "rows",
        "addMany",
        "success",
        "affectedRows",
        "oIds",
        "update",
        "updateMany"
    ],
    "mappings": "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",
    "file": "../../../src/controller/admin/question_add.js",
    "sourcesContent": [
        "const Base = require('../base.js');\n\nmodule.exports = class extends Base {\n async indexAction() {\n\n    if (this.get(\"id\") != null){\n      const question = await this.model('question').where({ id: this.get(\"id\") }).find();\n      const options = await this.model('options').where({ question_id: this.get(\"id\") }).select();\n\n      this.assign({\n        question: question,\n        options:options,\n        analysis_id:this.get(\"analysis_id\")\n      });\n    }else {\n      this.assign({\n        question: null,\n        options:null,\n        analysis_id:this.get(\"analysis_id\")\n      });\n    }\n\n    return this.display();\n  }\n  async addAction(){\n    const q_id = this.get(\"id\");\n    const isPut = this.isMethod('PUT');\n    const isPost = this.isMethod('POST');\n    const data = this.post();\n    data.c =  JSON.parse(data.c)\n    data.s =  JSON.parse(data.s)\n    // JSON.parse(data)\n    console.log('============:', JSON.stringify(data) );\n    let questionData = {\n      analysis_id:data.analysis_id,\n      title:data.title,\n      orderby:data.orderby,\n      type:data.type,\n      max_scores:data.max_scores\n    };\n    if (isPost) {\n      var question_id = await this.model('question').add(questionData);\n      if (question_id > 0){\n        let options = [];\n        data.c.forEach(function(item,index){\n          let model = {\n            question_id:question_id,\n            content:data.c[index],\n            scores:data.s[index]\n          }\n          options.push(model);\n        });\n        const rows = await this.model('options').addMany(options);\n        return this.success({ affectedRows: rows });\n      }\n    }\n    if (isPut) {\n      data.oIds =  JSON.parse(data.oIds);//options ids\n      var question_id = await this.model('question').where({ id: q_id }).update(questionData);\n      if (question_id > 0){\n        let options = [];\n        data.c.forEach(function(item,index){\n          let model = {\n            id:data.oIds[index],\n            question_id:q_id,\n            content:data.c[index],\n            scores:data.s[index]\n          }\n          options.push(model);\n        });\n        const rows = await this.model('options').updateMany(options);\n        return this.success({ affectedRows: rows });\n      }\n    }\n  }\n};\n"
    ]
}